{"ast":null,"code":"var _jsxFileName = \"/Users/rudrikasingh/Desktop/cryptoapp/src/components/Chart.jsx\";\nimport React from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst Chart = ({\n  arr = [],\n  currency,\n  days\n}) => {\n  const prices = [];\n  const date = [];\n  for (let i = 0; i < arr.length; i++) {\n    date.push(new Date(arr[i][0]));\n    prices.push(arr[i][1]);\n  }\n  const data = {};\n  return /*#__PURE__*/_jsxDEV(Line, {\n    options: {\n      responsive: true\n    },\n    data: {\n      labels: date,\n      datasets: [{\n        label: `Price in ${currency}`,\n        data: prices,\n        borderColor: \"rgb(255,99,132)\",\n        backgroundColor: \"rgba(255,99,132,0.5)\"\n      }]\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_c = Chart;\nexport default Chart;\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["React","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","arr","currency","days","prices","date","i","length","push","Date","data","options","responsive","labels","datasets","label","borderColor","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rudrikasingh/Desktop/cryptoapp/src/components/Chart.jsx"],"sourcesContent":["import React from 'react'\nimport {Line} from \"react-chartjs-2\"\nimport {Chart as ChartJS,CategoryScale,LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n} from \"chart.js\"\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n)\n\nconst Chart = ({arr = [],currency,days}) => {\n\n    const prices=[];\n    const date=[];\n\n    for(let i=0;i < arr.length;i++)\n    {\n        date.push(new Date(arr[i][0]));\n        prices.push(arr[i][1]);\n    }\n\n    const data ={\n\n    };\n \n  return (\n    <Line\n    options={{\n        responsive:true,\n    }}\n    data={{\n        labels:date,\n        datasets:[{ \n            label:`Price in ${currency}`,\n            data:prices,borderColor:\"rgb(255,99,132)\",\n        backgroundColor:\"rgba(255,99,132,0.5)\"\n    },],\n    }}\n    />\n  )\n}\n\nexport default Chart"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,IAAI,QAAO,iBAAiB;AACpC,SAAQC,KAAK,IAAIC,OAAO,EAACC,aAAa,EAACC,WAAW,EAC9CC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,QACH,UAAU;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjBT,OAAO,CAACU,QAAQ,CACZT,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MACJ,CAAC;AAED,MAAMR,KAAK,GAAGA,CAAC;EAACY,GAAG,GAAG,EAAE;EAACC,QAAQ;EAACC;AAAI,CAAC,KAAK;EAExC,MAAMC,MAAM,GAAC,EAAE;EACf,MAAMC,IAAI,GAAC,EAAE;EAEb,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAAGL,GAAG,CAACM,MAAM,EAACD,CAAC,EAAE,EAC9B;IACID,IAAI,CAACG,IAAI,CAAC,IAAIC,IAAI,CAACR,GAAG,CAACK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9BF,MAAM,CAACI,IAAI,CAACP,GAAG,CAACK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1B;EAEA,MAAMI,IAAI,GAAE,CAEZ,CAAC;EAEH,oBACEX,OAAA,CAACX,IAAI;IACLuB,OAAO,EAAE;MACLC,UAAU,EAAC;IACf,CAAE;IACFF,IAAI,EAAE;MACFG,MAAM,EAACR,IAAI;MACXS,QAAQ,EAAC,CAAC;QACNC,KAAK,EAAE,YAAWb,QAAS,EAAC;QAC5BQ,IAAI,EAACN,MAAM;QAACY,WAAW,EAAC,iBAAiB;QAC7CC,eAAe,EAAC;MACpB,CAAC;IACD;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEN,CAAC;AAAAC,EAAA,GA9BKjC,KAAK;AAgCX,eAAeA,KAAK;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}